{"name":"Calendar","description":"Global calendar of project.","version":"1.0","culture":"en-US","modifiedTime":"2025-07-16T11:30:27.981383+00:00","ppdf:outputFileFormat":"csv","pbi:mashup":{"fastCombine":false,"allowNativeQueries":false,"skipAutomaticHeaderAndTypeDetection":false,"queriesMetadata":{"DimDate":{"queryId":"72909dd1-21ae-4e50-a7dd-b18f0e65be9e","queryName":"DimDate","loadEnabled":true}},"document":"section Section1;\r\nshared DimDate = let\n\t\t\t\t\t\n    #\"-----PARAMETERS-----\" = \"\",\n\n    // Specify the start date \n    startDate = #date(2010, 1, 1),\n\n    // Years ahead today\n    yearsAhead = 0,\n            \n    // Specify the start of the week. Default: Day.Monday \n    startOfWeek = Day.Monday,\n    \n    // Specify the month of the fiscal year end. Default: 3 (March)\n    monthOfFiscalYearEnd = 3,\n    \n    /* Start day of the closing month. \n        Default: 16 (it means the closing month goes from the 16th of the current month \n        to the 15th of the next month) */\n    closingMonthStartDay = 16,\n    \n    // Available: \"en-US\", \"pt-BR\", \"es-ES\"\n    language = \"en-US\",\n\n    #\"-----INTERNAL USE-----\" = \"\",\n    \n    //endDate = Date.AddYears(Date.EndOfYear(Date.From(DateTime.LocalNow())), yearsAhead),\n    endDate = #date(2014, 12, 31),\n    currentDate = Date.From(DateTime.LocalNow()),\n    currentYear = Date.Year(currentDate),\n    currentMonth = Date.Month(currentDate),  \n    startYear = Date.Year(startDate),\n    startMonth = Date.Month(startDate),\n    currentFiscalYear = Date.Year(Date.AddMonths(currentDate, 12-monthOfFiscalYearEnd)), \n    \n\n    // The table with auxiliary texts cross the languages\n    auxiliaryTextTable = Table.UnpivotOtherColumns(\n        #table(\n            type table [Class=text, #\"en-US\"=text, #\"pt-BR\"=text, #\"es-ES\"=text],\n            {\n                    { \"current\"        , \"Current\"        , \"Atual\"       , \"Actual\"              }\n                , { \"quarter\"        , \"Q\"              , \"T\"           , \"T\"                   }\n                , { \"week\"           , \"W\"              , \"S\"           , \"S\"                   }\n                , { \"half\"           , \"H\"              , \"S\"           , \"S\"                   }\n                , { \"bimester\"       , \"B\"              , \"B\"           , \"B\"                   }\n                , { \"fortnight\"      , \"FN\"             , \"Q\"           , \"Q\"                   }\n                , { \"summer\"         , \"Summer\"         , \"Verão\"       , \"Verano\"              }\n                , { \"spring\"         , \"Spring\"         , \"Primavera\"   , \"Primavera\"           }\n                , { \"autumn\"         , \"Autumn\"         , \"Outono\"      , \"Otoño\"               }\n                , { \"winter\"         , \"Winter\"         , \"Inverno\"     , \"Invierno\"            }\n                , { \"businessDay\"    , \"BusinessDay\"    , \"Dia Útil\"    , \"Dia Laborable\"       }\n                , { \"non-businessDay\", \"Non-BusinessDay\", \"Dia Não Útil\", \"Dia No Laborable\"    }\n            }\n        ),\n        {\"Class\"}, \"Language\", \"Value\"\n    ),\n    \n    // Filtered table on selected language\n    auxiliaryTextTableOnLanguage = Table.Buffer(Table.SelectRows(auxiliaryTextTable, each [Language]=language)),\n    currentText = auxiliaryTextTableOnLanguage{[Class=\"current\"]}[Value], \n    quarterPrefix = auxiliaryTextTableOnLanguage{[Class=\"quarter\"]}[Value], \n    weekPrefix = auxiliaryTextTableOnLanguage{[Class=\"week\"]}[Value],\n    halfPrefix = auxiliaryTextTableOnLanguage{[Class=\"half\"]}[Value],\n    bimesterPrefix = auxiliaryTextTableOnLanguage{[Class=\"bimester\"]}[Value],\n    fortnightPrefix = auxiliaryTextTableOnLanguage{[Class=\"fortnight\"]}[Value],\n    summerText = auxiliaryTextTableOnLanguage{[Class=\"summer\"]}[Value],\n    springText = auxiliaryTextTableOnLanguage{[Class=\"spring\"]}[Value],\n    autumnText = auxiliaryTextTableOnLanguage{[Class=\"autumn\"]}[Value],\n    winterText = auxiliaryTextTableOnLanguage{[Class=\"winter\"]}[Value],\n    businessDayText = auxiliaryTextTableOnLanguage{[Class=\"businessDay\"]}[Value],\n    nonBusinessDayText = auxiliaryTextTableOnLanguage{[Class=\"non-businessDay\"]}[Value],\n    \n    // Invisible character (zero-width spacing)\n    zws = Character.FromNumber(8203),  \n\n    // List with all dates \n    datesList = List.Dates(startDate, Duration.Days(endDate-startDate)+1, #duration(1, 0, 0, 0)),\n\n    // List with all years \n    yearRange = List.Buffer({Date.Year(startDate)..Date.Year(endDate)}),\n            \n\n    #\"-----GENERATE HOLIDAYS-----\" = \"\", \n\n    // Fixed holidays that occur every year \n    fixedHolidaysList = #table(\n        type table [Day=Int64.Type, Month=Int64.Type, Holiday=text],\n        \n        if language=\"pt-BR\" then\n            {\n                // Day, Month, Holiday\n                    { 01, 01, \"Confraternização Universal\"   }\n                , { 25, 01, \"Aniversário da Cidade\"        } \n                , { 21, 04, \"Tiradentes\"                   } \n                , { 01, 05, \"Dia do Trabalhador\"           } \n                , { 09, 07, \"Revolução Constitucionalista\" } \n                , { 07, 09, \"Independência do Brasil\"      } \n                , { 12, 10, \"N. Srª Aparecida\"             } \n                , { 02, 11, \"Finados\"                      } \n                , { 15, 11, \"Proclamação da República\"     } \n                , { 20, 11, \"Consciência Negra\"            } \n                , { 24, 12, \"Véspera de Natal\"             } \n                , { 25, 12, \"Natal\"                        } \n                , { 31, 12, \"Véspera de Ano Novo\"          } \n            }\n\n        else if language=\"en-US\" then\n            {\n                // Day, Month, Holiday\n                    { 1,  1, \"New Year's Day\"}\n                , { 4,  7, \"Independence Day\"}\n                , {11, 11, \"Veterans Day\"}\n                , {25, 12, \"Christmas Day\"}\n            }\n\n        else if language=\"es-ES\" then\n            {\n                // Day, Month, Holiday\n                    { 1, 1, \"Año Nuevo\"}\n                , { 1, 5, \"Día del Trabajo\" } \n            }\n        else null\n    ),\n\n    // Function that generates the fixed holidays for all years \n    fxGenerateFixedHolidays = (year)=>\n        Table.AddColumn(\n            fixedHolidaysList,\n            \"Date\",\n            each #date(year, [Month], [Day]),\n            type date\n        )[[Date], [Holiday]],\n            \n    // Generate the fixed holiday table \n    fixedHolidays = Table.Combine(List.Transform(yearRange, fxGenerateFixedHolidays)),\n    \n    // Function that generates the moving holidays \n    fxGenerateMovingHolidays = (year) =>\n    let\n        modExcel = (x, y) =>\n            let\n                m = Number.Mod(x, y)\n            in\n                if m < 0 then m + y else m,\n        easter = Date.From(\n            Number.Round(\n                Number.From(#date(year, 4, 1))\n                    / 7\n                    + modExcel(19 * modExcel(year, 19) - 7, 30) * 0.14,\n                0,\n                RoundingMode.Up\n            )\n                * 7\n                - 6\n        ),\n        movingHolidays = #table(\n            type table [Date = date, Holiday = text],\n            {\n                    { Date.AddDays(easter, -2  ), if language = \"pt-BR\" then \"Sexta-Feira Santa\" else if language = \"en-US\" then \"Good Friday\" else if language = \"es-ES\" then \"Viernes Santo\" else null } \n                , { easter                    , if language = \"pt-BR\" then \"Páscoa\" else if language = \"en-US\" then \"Easter\" else if language = \"es-ES\" then \"Pascua\" else null }\n                , { Date.AddDays(easter, 60  ), \"Corpus Christi\"             }\n            //  , { Date.AddDays(easter, -48 ), \"Segunda-feira de Carnaval\"  }\n            //  , { Date.AddDays(easter, -47 ), \"Terça-feira de Carnaval\"    }\n            //  , { Date.AddDays(easter, -46 ), \"Quarta-feira de Cinzas\"     }\n            }\n        )\n    in\n        movingHolidays,\n            \n    // Generate the moving holiday table \n    movingHolidays = Table.Combine(List.Transform(yearRange, fxGenerateMovingHolidays)),\n            \n    // Table containing all holidays \n    holidays = Table.Group(Table.Combine({fixedHolidays, movingHolidays}), {\"Date\"}, {{\"Holiday\", each Text.Combine(_[Holiday], \"/\"), type text}}),\n    \n    #\"-----GENERATE DATA-----\" = \"\",\n\n    #\"-----DATE-----\" = \"\",\n    datesTable = Table.FromList(datesList, Splitter.SplitByNothing(), type table [ Date = date ]),\n    add_DateIndex = Table.AddIndexColumn(datesTable, \"DateIndex\", 1, 1, Int64.Type),\n    add_DaysToToday = Table.AddColumn(add_DateIndex, \"DaysToToday\", each Number.From([Date] - currentDate), Int64.Type),\n    add_CurrentDate = Table.AddColumn(add_DaysToToday, \"CurrentDate\", each if [DaysToToday] = 0 then currentText else Date.ToText([Date], \"dd/MM/yyyy\"), type text),\n\n    #\"-----YEAR-----\" = \"\",    \n    add_Year = Table.AddColumn(add_CurrentDate, \"Year\", each Date.Year([Date]), Int64.Type),\n    add_YearStart = Table.AddColumn(add_Year, \"YearStart\", each Date.StartOfYear([Date]), type date),\n    add_YearEnd = Table.AddColumn(add_YearStart, \"YearEnd\", each Date.EndOfYear([Date]), type date),\n    add_YearIndex = Table.AddColumn(add_YearEnd, \"YearIndex\", each [Year] - startYear + 1, Int64.Type),\n    add_YearDescendingName = Table.AddColumn(add_YearIndex, \"YearDescendingName\", each [Year], Int64.Type),\n    add_YearDescendingNumber = Table.AddColumn(add_YearDescendingName, \"YearDescendingNumber\", each [Year] * -1, Int64.Type),\n    add_YearsToToday = Table.AddColumn(add_YearDescendingNumber, \"YearsToToday\", each [Year] - Date.Year(currentDate), Int64.Type),\n    add_CurrentYear = Table.AddColumn(add_YearsToToday, \"CurrentYear\", each if [YearsToToday] = 0 then currentText else Text.From([Year]), type text),\n\n    #\"-----DAY-----\" = \"\",\n    add_DayOfMonth = Table.AddColumn(add_CurrentYear, \"DayOfMonth\", each Date.Day([Date]), Int64.Type),\n    add_DayOfYear = Table.AddColumn(add_DayOfMonth, \"DayOfYear\", each Date.DayOfYear([Date]), Int64.Type),\n    add_DayOfWeekNumber = Table.AddColumn(add_DayOfYear, \"DayOfWeekNumber\", each Date.DayOfWeek([Date], startOfWeek), Int64.Type),\n    add_DayOfWeekName = Table.AddColumn(add_DayOfWeekNumber, \"DayOfWeekName\", each Text.Proper(Date.DayOfWeekName([Date], language)), type text),\n    add_DayOfWeekNameShort = Table.AddColumn(add_DayOfWeekName, \"DayOfWeekNameShort\", each Text.Start([DayOfWeekName], 3), type text),\n    add_DayOfWeekNameInitials = Table.AddColumn(add_DayOfWeekNameShort, \"DayOfWeekNameInitials\", each Text.Repeat(zws, 7-[DayOfWeekNumber]) & Text.Start([DayOfWeekName], 1), type text),\n\n    #\"-----MONTH-----\" = \"\",\n    add_MonthNumber = Table.AddColumn(add_DayOfWeekNameInitials, \"MonthNumber\", each Date.Month([Date]), Int64.Type),\n    add_MonthName = Table.AddColumn(add_MonthNumber, \"MonthName\", each Text.Proper(Date.MonthName([Date], language)), type text), \n    add_MonthNameShort = Table.AddColumn(add_MonthName, \"MonthNameShort\", each Text.Start([MonthName], 3), type text), \n    add_MonthNameInitials = Table.AddColumn(add_MonthNameShort, \"MonthNameInitials\", each Text.Repeat(zws, 12-[MonthNumber]) & Text.Start([MonthName], 1), type text),\n    add_MonthYearName = Table.AddColumn(add_MonthNameInitials, \"MonthYearName\", each Text.Proper(Date.ToText([Date], [Format=\"MMM/yy\", Culture=language])), type text),\n    add_MonthYearNumber = Table.AddColumn(add_MonthYearName, \"MonthYearNumber\", each [Year] * 100 + [MonthNumber], Int64.Type),\n    add_MonthDayNumber = Table.AddColumn(add_MonthYearNumber, \"MonthDayNumber\", each [MonthNumber] * 100 + [DayOfMonth], Int64.Type),\n    add_MonthDayName = Table.AddColumn(add_MonthDayNumber, \"MonthDayName\", each [MonthNameShort] & \" \" & Text.From([DayOfMonth]), type text), \n    add_MonthStart = Table.AddColumn(add_MonthDayName, \"MonthStart\", each Date.StartOfMonth([Date]), type date),\n    add_MonthEnd = Table.AddColumn(add_MonthStart, \"MonthEnd\", each Date.EndOfMonth([Date]), type date),\n    add_MonthIndex = Table.AddColumn(add_MonthEnd, \"MonthIndex\", each 12 * ([Year]-Date.Year(startDate)) + [MonthNumber], Int64.Type),\n    add_MonthsToToday = Table.AddColumn(add_MonthIndex, \"MonthsToToday\", each ([Year] * 12 - 1 + [MonthNumber]) - (currentYear * 12 - 1 + Date.Month(currentDate)), Int64.Type),\n    add_CurrentMonthName = Table.AddColumn(add_MonthsToToday, \"CurrentMonthName\", each if currentMonth = [MonthNumber] then currentText else [MonthName], type text),\n    add_CurrentMonthNameShort = Table.AddColumn(add_CurrentMonthName, \"CurrentMonthNameShort\", each if currentMonth = [MonthNumber] then currentText else [MonthNameShort], type text),\n    add_CurrentMonthYearName = Table.AddColumn(add_CurrentMonthNameShort, \"CurrentMonthYearName\", each if [MonthsToToday] = 0 then currentText else [MonthYearName], type text),\n\n    #\"-----QUARTER-----\" = \"\",\n    add_QuarterNumber = Table.AddColumn(add_CurrentMonthYearName, \"QuarterNumber\", each Date.QuarterOfYear([Date]), Int64.Type), \n    add_QuarterName = Table.AddColumn(add_QuarterNumber, \"QuarterName\", each quarterPrefix & Text.From([QuarterNumber]), type text),\n    add_QuarterYearName = Table.AddColumn(add_QuarterName, \"QuarterYearName\", each [QuarterName] & \" \" & Text.End(Text.From([Year]), 2), type text),\n    add_QuarterYearNumber = Table.AddColumn(add_QuarterYearName, \"QuarterYearNumber\", each [Year] * 100 + [QuarterNumber], Int64.Type), \n    add_QuarterStart = Table.AddColumn(add_QuarterYearNumber, \"QuarterStart\", each Date.StartOfQuarter([Date]), type date),\n    add_QuarterEnd = Table.AddColumn(add_QuarterStart, \"QuarterEnd\", each Date.EndOfQuarter([Date]), type date),\n    add_QuarterIndex = Table.AddColumn(add_QuarterEnd, \"QuarterIndex\", each 4 * ([Year] - Date.Year(startDate)) + [QuarterNumber], Int64.Type),\n    add_QuartersToToday = Table.AddColumn(add_QuarterIndex, \"QuartersToToday\", each ([Year] * 4 - 1 + [QuarterNumber]) - (currentYear * 4 - 1 + Date.QuarterOfYear(currentDate)), Int64.Type),\n    add_CurrentQuarter = Table.AddColumn(add_QuartersToToday, \"CurrentQuarter\", each if Date.QuarterOfYear(currentDate) = [QuarterNumber] then currentText else [QuarterName], type text),\n    add_CurrentQuarterYear = Table.AddColumn(add_CurrentQuarter, \"CurrentQuarterYear\", each if [QuartersToToday] = 0 then currentText else [QuarterYearName], type text),\n    add_MonthOfQuarterNumber = Table.AddColumn(add_CurrentQuarterYear, \"MonthOfQuarterNumber\", each Number.Mod([MonthNumber] - 1, 3) + 1, Int64.Type),\n\n    #\"-----WEEK-----\" = \"\",\n    add_WeekOfYearNumberISO = Table.AddColumn(\n        add_MonthOfQuarterNumber, \n        \"WeekOfYearNumberISO\", \n        each let\n            thursdayInWeek = Date.AddDays(\n                [Date],\n                3 - Date.DayOfWeek([Date], Day.Monday)\n            ),\n            startYearThursdayInWeek = #date(Date.Year(thursdayInWeek), 1, 1),\n            diffDays = Duration.Days(thursdayInWeek - startYearThursdayInWeek)\n        in\n            Number.IntegerDivide(diffDays, 7, 0) + 1,\n        Int64.Type\n    ),\n\n    add_YearISO = Table.AddColumn(add_WeekOfYearNumberISO, \"YearISO\", each Date.Year(Date.AddDays([Date], 26 - [WeekOfYearNumberISO])), Int64.Type),\n    add_WeekYearNumberISO = Table.AddColumn(add_YearISO, \"WeekYearNumberISO\", each [YearISO] * 100 + [WeekOfYearNumberISO], Int64.Type),\n    add_WeekYearNameISO = Table.AddColumn(add_WeekYearNumberISO, \"WeekYearNameISO\", each weekPrefix & Text.PadStart(Text.From([WeekOfYearNumberISO]), 2, \"0\") & \" \" & Text.From([YearISO]), type text),\n    add_WeekStartISO = Table.AddColumn(add_WeekYearNameISO, \"WeekStartISO\", each Date.StartOfWeek([Date], Day.Monday), type date), \n    add_WeekEndISO = Table.AddColumn(add_WeekStartISO, \"WeekEndISO\", each Date.EndOfWeek([Date], Day.Monday), type date), \n    add_WeekIndexISO = Table.AddColumn(add_WeekEndISO, \"WeekIndexISO\", each Number.From([WeekStartISO] - Date.StartOfWeek(startDate, Day.Monday)) / 7 + 1, Int64.Type),\n    add_WeeksToTodayISO = Table.AddColumn(add_WeekIndexISO, \"WeeksToTodayISO\", each Number.From([WeekStartISO] - Date.StartOfWeek(currentDate, Day.Monday)) / 7, Int64.Type),\n    add_CurrentWeekISO = Table.AddColumn(add_WeeksToTodayISO, \"CurrentWeekISO\", each if [WeeksToTodayISO] = 0 then currentText else [WeekYearNameISO], type text),\n    add_WeekPeriodName = Table.AddColumn(add_CurrentWeekISO, \"WeekPeriodName\", each [WeekYearNameISO] & \": \" & Date.ToText([WeekStartISO], [Format=\"dd/MM/yyyy\"]) & \"~\" & Date.ToText([WeekEndISO], [Format=\"dd/MM/yyyy\"]), type text),\n    add_WeekOfMonthNumber = Table.AddColumn(add_WeekPeriodName, \"WeekOfMonthNumber\", each Date.WeekOfMonth([Date], startOfWeek), Int64.Type),\n    \n    #\"-----HALF-----\" = \"\",\n    add_HalfNumber = Table.AddColumn(add_WeekOfMonthNumber, \"HalfNumber\", each if [MonthNumber] <= 6 then 1 else 2, Int64.Type),\n    add_HalfYearName = Table.AddColumn(add_HalfNumber, \"HalfYearName\", each halfPrefix & Text.From([HalfNumber]) & \" \" & Text.From([Year]), type text),\n    add_HalfYearNumber = Table.AddColumn(add_HalfYearName, \"HalfYearNumber\", each [Year] * 100 + [HalfNumber], Int64.Type),\n    add_HalfIndex = Table.AddColumn(add_HalfYearNumber, \"HalfIndex\", each (2*([Year] - Date.Year(startDate))) + [HalfNumber], Int64.Type),\n    add_HalfsToToday = Table.AddColumn(add_HalfIndex, \"HalfsToToday\", each [HalfIndex] - ( 2 * ( currentYear - startYear ) + ( if currentMonth <= 6 then 1 else 2 )), Int64.Type),\n    add_CurrentHalf = Table.AddColumn(add_HalfsToToday, \"CurrentHalf\", each if [HalfsToToday] = 0 then currentText else [HalfYearName], type text), \n\n    #\"-----BIMESTER-----\" = \"\",\n    add_BimesterNumber = Table.AddColumn(add_CurrentHalf, \"BimesterNumber\", each Number.RoundUp([MonthNumber]/ 2), Int64.Type),\n    add_BimesterYearName = Table.AddColumn(add_BimesterNumber, \"BimesterYearName\", each bimesterPrefix & Text.From([BimesterNumber]) & \" \" & Text.From([Year]), type text),\n    add_BimesterYearNumber = Table.AddColumn(add_BimesterYearName, \"BimesterYearNumber\", each [Year] * 100 + [BimesterNumber], Int64.Type),\n    add_BimesterIndex = Table.AddColumn(add_BimesterYearNumber, \"BimesterIndex\", each (6*([Year] - Date.Year(startDate))) + [BimesterNumber], Int64.Type),\n    add_BimestersToToday = Table.AddColumn(add_BimesterIndex, \"BimestersToToday\", each ( 6 * ( [Year] - startYear ) + [BimesterNumber])  - (( 6 * ( currentYear - startYear ) ) + Number.RoundUp ( currentMonth / 2, 0 )), Int64.Type),\n    add_CurrentBimester = Table.AddColumn(add_BimestersToToday, \"CurrentBimester\", each if [BimestersToToday] = 0 then currentText else [BimesterYearName], type text),\n\n    #\"-----FORTNIGHT-----\" = \"\",\n    add_FortnightOfMonthNumber = Table.AddColumn(add_CurrentBimester, \"FortnightOfMonthNumber\", each if [DayOfMonth] <= 15 then 1 else 2, Int64.Type),\n    add_FortnightMonthNumber = Table.AddColumn(add_FortnightOfMonthNumber, \"FortnightMonthNumber\", each [MonthNumber] * 10 + [FortnightOfMonthNumber], Int64.Type),\n    add_FortnightMonthName = Table.AddColumn(add_FortnightMonthNumber, \"FortnightMonthName\", each [MonthNameShort] & \" \" & Text.From([FortnightOfMonthNumber]), type text),\n    add_FortnightMonthYearNumber = Table.AddColumn(add_FortnightMonthName, \"FortnightMonthYearNumber\", each [Year] * 10000 + [MonthNumber] * 100 + [FortnightMonthNumber], Int64.Type),\n    add_FortnightMonthYearName = Table.AddColumn(add_FortnightMonthYearNumber, \"FortnightMonthYearName\", each fortnightPrefix & Text.From([FortnightOfMonthNumber]) & \" \" & [MonthNameShort] & \" \" & Text.From([Year]), type text),\n    add_FortnightIndex = Table.AddColumn(add_FortnightMonthYearName, \"FortnightIndex\", each 24 * ([Year] - Date.Year(startDate)) + 2 * ([MonthNumber]-Date.Month(startDate)) + [FortnightOfMonthNumber] , Int64.Type),\n    add_FortnightsToToday = Table.AddColumn(add_FortnightIndex, \"FortnightsToToday\", each [FortnightIndex] - ( (24 * (currentYear - Date.Year(startDate))) + (2 * (Date.Month(currentDate)-Date.Month(startDate))) + (if Date.Day(currentDate) <= 15 then 1 else 2)), Int64.Type),\n    add_CurrentFortnight = Table.AddColumn(add_FortnightsToToday, \"CurrentFortnight\", each if [FortnightsToToday] = 0 then currentText else [FortnightMonthName], type text),\n    \n    #\"-----CLOSING-----\" = \"\",\n    add_ClosingDateRef = Table.AddColumn(add_CurrentFortnight, \"ClosingDateRef\", each if [DayOfMonth] <= closingMonthStartDay then [Date] else Date.AddMonths([Date], 1), type date),\n    add_ClosingYear = Table.AddColumn(add_ClosingDateRef, \"ClosingYear\", each Date.Year([ClosingDateRef]), Int64.Type),\n    add_ClosingMonthName = Table.AddColumn(add_ClosingYear, \"ClosingMonthName\", each Text.Proper(Date.MonthName([ClosingDateRef], language)), type text),\n    add_ClosingMonthNameShort = Table.AddColumn(add_ClosingMonthName, \"ClosingMonthNameShort\", each Text.Start([ClosingMonthName], 3), type text), \n    add_ClosingMonthNumber = Table.AddColumn(add_ClosingMonthNameShort, \"ClosingMonthNumber\", each Date.Month([ClosingDateRef]), Int64.Type),\n    add_ClosingMonthYearName = Table.AddColumn(add_ClosingMonthNumber, \"ClosingMonthYearName\", each [ClosingMonthNameShort] & \"/\" & Text.End(Text.From([ClosingYear]), 2), type text), \n    add_ClosingMonthYearNumber = Table.AddColumn(add_ClosingMonthYearName, \"ClosingMonthYearNumber\", each [ClosingYear] * 100 + [ClosingMonthNumber], Int64.Type),\n\n    #\"-----SEASONS-----\" = \"\",\n    add_SeasonNorthNumber = Table.AddColumn(\n        add_ClosingMonthYearNumber, \n        \"SeasonNorthNumber\", \n        each if [MonthDayNumber] >= 321 and [MonthDayNumber] <= 620  then 1 else \n                if [MonthDayNumber] >= 621 and [MonthDayNumber] <= 921  then 2 else \n                if [MonthDayNumber] >= 922 and [MonthDayNumber] <= 1221 then 3 else 4,\n        Int64.Type\n    ),\n\n    add_SeasonNorthName = Table.AddColumn(\n        add_SeasonNorthNumber, \n        \"SeasonNorthName\", \n        each if [SeasonNorthNumber] = 1 then springText else \n                if [SeasonNorthNumber] = 2 then summerText else \n                if [SeasonNorthNumber] = 3 then autumnText else winterText, \n        type text\n    ),\n\n    add_SeasonSouthNumber = Table.AddColumn(\n        add_SeasonNorthName, \n        \"SeasonSouthNumber\", \n        each if [MonthDayNumber] >= 321 and [MonthDayNumber] <= 620  then 1 else \n                if [MonthDayNumber] >= 621 and [MonthDayNumber] <= 921  then 2 else \n                if [MonthDayNumber] >= 922 and [MonthDayNumber] <= 1221 then 3 else 4,\n        Int64.Type\n    ),\n\n    add_SeasonSouthName = Table.AddColumn(\n        add_SeasonSouthNumber, \n        \"SeasonSouthName\", \n        each if [SeasonNorthNumber] = 1 then autumnText else \n                if [SeasonNorthNumber] = 2 then winterText else \n                if [SeasonNorthNumber] = 3 then springText else summerText, \n        type text\n    ),\n\n    #\"-----BUSINESS-----\" = \"\",\n    add_Holiday = Table.RenameColumns(Table.RemoveColumns(Table.Join(add_SeasonSouthName, \"Date\", Table.PrefixColumns(holidays, \"h\"), \"h.Date\", JoinKind.LeftOuter, JoinAlgorithm.LeftIndex), \"h.Date\"), {{\"h.Holiday\", \"Holiday\"}}),\n    add_BusinessDayNumber = Table.AddColumn(add_Holiday, \"BusinessDayNumber\", each if [Holiday] <> null or Date.DayOfWeek([Date], Day.Monday) > 4 then 0 else 1, Int64.Type),\n    add_BusinessDayName = Table.AddColumn(add_BusinessDayNumber, \"BusinessDayName\", each if [BusinessDayNumber] = 1 then businessDayText else nonBusinessDayText, type text),\n\n\n    #\"-----FISCAL COLUMNS-----\" = \"\", \n    #\"-----FISCAL YEAR-----\" = \"\", \n    add_FiscalYearStartNumber = Table.AddColumn(add_BusinessDayName, \"FiscalYearStartNumber\", each Date.Year(Date.AddMonths([Date], -monthOfFiscalYearEnd)), Int64.Type),\n    add_FiscalYearEndNumber = Table.AddColumn(add_FiscalYearStartNumber, \"FiscalYearEndNumber\", each [FiscalYearStartNumber] + 1, Int64.Type),\n    add_FiscalYear = Table.AddColumn(add_FiscalYearEndNumber, \"FiscalYear\", each \"FY \" & Text.From([FiscalYearStartNumber]) & \"-\" &Text.From([FiscalYearEndNumber]), type text),\n    add_FiscalYearStart = Table.AddColumn( add_FiscalYear, \"FiscalYearStart\", each #date( [FiscalYearStartNumber], if monthOfFiscalYearEnd = 12 then 1 else  monthOfFiscalYearEnd + 1 , 1), type date ),\n    add_FiscalYearEnd = Table.AddColumn( add_FiscalYearStart, \"FiscalYearEnd\", each Date.EndOfMonth(#date([FiscalYearEndNumber], monthOfFiscalYearEnd, 1)), type date),\n    add_CurrentFiscalYear = Table.AddColumn(add_FiscalYearEnd, \"CurrentFiscalYear\", each if [FiscalYearStartNumber] = currentFiscalYear then currentText else [FiscalYear], type text),\n    add_FiscalYearsToToday = Table.AddColumn(add_CurrentFiscalYear, \"FiscalYearsToToday\", each [FiscalYearStartNumber] - currentFiscalYear, Int64.Type),\n    \n    #\"-----FISCAL MONTH-----\" = \"\", \n    add_FiscalMonthNumber = Table.AddColumn(add_FiscalYearsToToday, \"FiscalMonthNumber\", each Date.Month( Date.AddMonths([Date], - monthOfFiscalYearEnd ) ), Int64.Type),\n    add_FiscalMonthName = Table.AddColumn( add_FiscalMonthNumber, \"FiscalMonthName\", each Text.Proper(Date.ToText([Date], [Format=\"MMMM\", Culture = language])), type text ),\n    add_FiscalMonthNameShort = Table.AddColumn(add_FiscalMonthName, \"FiscalMonthNameShort\", each Text.Start([FiscalMonthName], 3), type text),\n    add_CurrentFiscalMonth = Table.AddColumn( add_FiscalMonthNameShort, \"CurrentFiscalMonth\", each if Date.IsInCurrentMonth([Date]) then currentText else [FiscalMonthName], Text.Type),\n    add_FiscalYearMonthName = Table.AddColumn(add_CurrentFiscalMonth, \"FiscalYearMonthName\", each [FiscalMonthNameShort] & \" \" & [FiscalYear], type text),\n    add_FiscalYearMonthNumber = Table.AddColumn( add_FiscalYearMonthName, \"FiscalYearMonthNumber\", each [FiscalYearStartNumber] * 100 + [FiscalMonthNumber], Int64.Type ),\n    add_FiscalYearMonthCurrent = Table.AddColumn( add_FiscalYearMonthNumber, \"FiscalYearMonthCurrent\", each if [CurrentFiscalYear] = currentText and [CurrentFiscalMonth] = currentText then currentText else [FiscalYearMonthName], type text),\n    add_FiscalMonthsToToday = Table.AddColumn(add_FiscalYearMonthCurrent, \"FiscalMonthsToToday\", each [ CurrentFiscalMonth = Date.Month( Date.AddMonths( currentDate, - monthOfFiscalYearEnd ) ), FiscalQuartersToToday = (([FiscalYearStartNumber] - currentFiscalYear) * 12) + ([FiscalMonthNumber] - CurrentFiscalMonth)][FiscalQuartersToToday], Int64.Type ),\n    \n    #\"-----FISCAL QUARTER-----\" = \"\", \n    add_FiscalQuarterNumber = Table.AddColumn(add_FiscalMonthsToToday, \"FiscalQuarterNumber\", each Number.RoundUp( [FiscalMonthNumber] / 3), Int64.Type),\n    add_FiscalQuarterName = Table.AddColumn(add_FiscalQuarterNumber, \"FiscalQuarterName\", each \"FQ \" & Text.From([FiscalQuarterNumber]), Text.Type),\n    add_FiscalMonthOfQuarterNumber = Table.AddColumn(add_FiscalQuarterName, \"FiscalMonthOfQuarterNumber\", each [FiscalMonthNumber] - 3 * ([FiscalQuarterNumber] - 1) , Int64.Type ),\n    add_FiscalYearQuarterName = Table.AddColumn(add_FiscalMonthOfQuarterNumber, \"FiscalYearQuarterName\", each [FiscalQuarterName] & \" | \" & [FiscalYear], type text),\n    add_FiscalYearQuarterNumber = Table.AddColumn(add_FiscalYearQuarterName, \"FiscalYearQuarterNumber\", each [FiscalYearStartNumber] * 100 + [FiscalQuarterNumber], Int64.Type),\n    add_FiscalQuarterStart = Table.AddColumn(add_FiscalYearQuarterNumber, \"FiscalQuarterStart\", each Date.StartOfMonth( Date.AddMonths( [Date] , 1-[FiscalMonthOfQuarterNumber] )), Date.Type),\n    add_FiscalQuarterEnd = Table.AddColumn(add_FiscalQuarterStart, \"FiscalQuarterEnd\", each Date.EndOfMonth( Date.AddMonths( [Date] , 3-[FiscalMonthOfQuarterNumber] )), Date.Type),\n    add_FiscalQuartersToToday = Table.AddColumn(\n        add_FiscalQuarterEnd, \n        \"FiscalQuartersToToday\", \n        each [\n            CurrentFiscalMonth = Date.Month(Date.AddMonths(currentDate, - monthOfFiscalYearEnd)),  \n            CurrentFiscalQuarter = Number.RoundUp(CurrentFiscalMonth / 3),\n            FiscalQuartersToToday = (([FiscalYearStartNumber] - currentFiscalYear) * 4) + ([FiscalQuarterNumber] - CurrentFiscalQuarter)\n        ][FiscalQuartersToToday], \n        Int64.Type \n    ),\n    add_CurrentFiscalQuarter = Table.AddColumn(add_FiscalQuartersToToday, \"CurrentFiscalQuarter\", each if [FiscalQuartersToToday] = 0 then currentText else [FiscalYearQuarterName], type text),\n    add_DayOfFiscalQuarter = Table.AddColumn(add_CurrentFiscalQuarter, \"DayOfFiscalQuarter\", each Number.From( [Date] - [FiscalQuarterStart] ) + 1, Int64.Type ),\n\n    #\"-----RENAME COLUMNS----\" = \"\",\n    columnNamesDictionary = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"jVjbbtw4DP2XPPcnMpkGCdAm7U6KYlHkQXGUxrseC7A9xWa/fnUjeURx0n2ZkY54aIo6omz9+HGxd5u/+JD+XPy79sOru3j8UPDb+dn/Uwdjexw8mdReMXxbH8JDeHZvyXR06xe3uJvwl6/dG7dusf+Wra9Oy+LnDZ56uZ3cRH4vh9xLln96t0T4cg71l8DD5patYLfzOIyhaZPVx/m54NfjkRozj9LMMq9OTNpktffr4CM0/7xzx2qy98OS4c3fBQGzYQWfFtPF6fjkl97J6eiXAPAwAkxuIMPRDjOculaGJX2U4NSU9MZlu3/5HObttSzTPnz2a236KbXZqrrKRmU5ihEtSjb67v3fPMU07g7+6GbH88ucTy3askuOkRsYEabkt2EeXkNWhaJfRuNfo3vuI8h+riLJCCNqaRvdtPb+ssrcuNruyuhUk5ezyzmJKeVcSFvsyuzTSIAWzZVtaJ7VEOfHDJkV02BGlQkzYaIRf1p8iS0uuYRXOk2E2RpmnExg0tJlRsw7EmJSkSDdhsDxpPHQdpp4qFbEUa4V0mazUiziQCkWuTHLMFWLzKzVQtpsBps0jnrcpblvbVO19nmvQoaH2qdJaRaogalKEuhDhIGOuiXWUVDhgEC+nmJivaz1wzIe/botUs80gqzyMLEIRh/sIUC2ESUqSEXYKLIx7QJt1Vn5pCC2Yh1pBEhFT2xQVAXdGY1JXeCvaqwiHoRWOSA1pqHeBLREV500c6+HhAByVLSsehpg1npyc9Rkkd2/aMmkHRt63STYT5Z6UnUup1HxcXu4j/al/uaTqdg2cD6lBOfzP9ukEx8b9BD7EeYDOu/MT0VXGQYLSmUXuFlvaFXUZSNEinpDg6i3tjujcdZb6y/JC5GRESKR4NCKBdeAJDhiV/XkJ+PkkzwaYCCEnvnFL2N4rhu/GBWIdr7GaOsXobTHL8kEj2HWSHse37jpBXmtPhVABKhRZCElqkUoTKbpZ2F16jGiUt0gCy4bCiB7qBlkgSWDMatiJD4GUzc892Wz70rJkknt9Abf9TubSJDEXVfnd2aZb6j6mZjIHkM6JXOna7ACkAMJ3Rk1ePdeCSYfGFhN6q6vwNfx3J7Hn6+bVvXX0zj/67WuEzp4Q9nsx/Zi+XjXQVkqpAdGBkZoqVpys2DgAtcM/LTLZrjqYhHlKDdGRLT8ROflJyosP5Ng/YmH609Uc/3ZCZBJAETEI3gKa/yGTJ/Nf/i0E9OX897nb+ZjdBcKmvt7fzX6+JAEAVc+CIVV+sUcbdVbqRDkpbCQ8NVUUeHVtOWr91N0BO+n6A3eGMAVvDBUH6IPpHevt9Z0OA1nZmR82NihiCOJ5uDdGua7ODmZy8eoicGFBEppNEDNLxNpDIMF0SQK9xBO/bMPp0k/WSDNbZ6bzEIP8MEWprHsi+t4NvPH93Usa+OvWndPMbV+XfHzL5p820aJKfY/uaewuKepOSyAylcGmcjXBUKDvT6ug5v4AgmvY8pQ/fjFCxlroPUV37x6T/GFy/KDcOsFrUr7pbSNwLvI+liNINs4jiqspjKZUcElUgXgdGKGuqbKA6O+rSrm6lgsYL/dM4z7q0E0UypWsQpdv1WDWayYqgoV+ug+pMEfWlPaBLDSpi8BKMdNeTozBeGr6tRlToOGjzoZZQ+TOL/85g1ILwCBbQWcvVdQ87Hx3o+6NWjy2qOGOn733drnGb9e30l4G2FMrB2kOdBLQAdp0KAe/c/sdXcfquoQnmqIWXzOXYdIFerAuaeblx29tNSY1lezUY0bkFbrGlYX59pLvhtXnAu6J9f44+N/\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#\"en-US\" = _t, #\"pt-BR\" = _t, #\"es-ES\" = _t]),\n    \n    fromToColumnNames = if language <> \"en-US\" then List.Zip(Table.ToColumns(Table.SelectColumns(columnNamesDictionary, {\"en-US\", language}))) else null,\n    renamedColumns = if language <> \"en-US\" then Table.RenameColumns(add_DayOfFiscalQuarter, fromToColumnNames) else add_DayOfFiscalQuarter\nin\n    renamedColumns;\r\n"},"annotations":[{"name":"pbi:QueryGroups","value":"[]"}],"entities":[{"$type":"LocalEntity","name":"DimDate","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"DimDate.csv"},"attributes":[{"name":"Date","dataType":"date"},{"name":"DateIndex","dataType":"int64"},{"name":"DaysToToday","dataType":"int64"},{"name":"CurrentDate","dataType":"string"},{"name":"Year","dataType":"int64"},{"name":"YearStart","dataType":"date"},{"name":"YearEnd","dataType":"date"},{"name":"YearIndex","dataType":"int64"},{"name":"YearDescendingName","dataType":"int64"},{"name":"YearDescendingNumber","dataType":"int64"},{"name":"YearsToToday","dataType":"int64"},{"name":"CurrentYear","dataType":"string"},{"name":"DayOfMonth","dataType":"int64"},{"name":"DayOfYear","dataType":"int64"},{"name":"DayOfWeekNumber","dataType":"int64"},{"name":"DayOfWeekName","dataType":"string"},{"name":"DayOfWeekNameShort","dataType":"string"},{"name":"DayOfWeekNameInitials","dataType":"string"},{"name":"MonthNumber","dataType":"int64"},{"name":"MonthName","dataType":"string"},{"name":"MonthNameShort","dataType":"string"},{"name":"MonthNameInitials","dataType":"string"},{"name":"MonthYearName","dataType":"string"},{"name":"MonthYearNumber","dataType":"int64"},{"name":"MonthDayNumber","dataType":"int64"},{"name":"MonthDayName","dataType":"string"},{"name":"MonthStart","dataType":"date"},{"name":"MonthEnd","dataType":"date"},{"name":"MonthIndex","dataType":"int64"},{"name":"MonthsToToday","dataType":"int64"},{"name":"CurrentMonthName","dataType":"string"},{"name":"CurrentMonthNameShort","dataType":"string"},{"name":"CurrentMonthYearName","dataType":"string"},{"name":"QuarterNumber","dataType":"int64"},{"name":"QuarterName","dataType":"string"},{"name":"QuarterYearName","dataType":"string"},{"name":"QuarterYearNumber","dataType":"int64"},{"name":"QuarterStart","dataType":"date"},{"name":"QuarterEnd","dataType":"date"},{"name":"QuarterIndex","dataType":"int64"},{"name":"QuartersToToday","dataType":"int64"},{"name":"CurrentQuarter","dataType":"string"},{"name":"CurrentQuarterYear","dataType":"string"},{"name":"MonthOfQuarterNumber","dataType":"int64"},{"name":"WeekOfYearNumberISO","dataType":"int64"},{"name":"YearISO","dataType":"int64"},{"name":"WeekYearNumberISO","dataType":"int64"},{"name":"WeekYearNameISO","dataType":"string"},{"name":"WeekStartISO","dataType":"date"},{"name":"WeekEndISO","dataType":"date"},{"name":"WeekIndexISO","dataType":"int64"},{"name":"WeeksToTodayISO","dataType":"int64"},{"name":"CurrentWeekISO","dataType":"string"},{"name":"WeekPeriodName","dataType":"string"},{"name":"WeekOfMonthNumber","dataType":"int64"},{"name":"HalfNumber","dataType":"int64"},{"name":"HalfYearName","dataType":"string"},{"name":"HalfYearNumber","dataType":"int64"},{"name":"HalfIndex","dataType":"int64"},{"name":"HalfsToToday","dataType":"int64"},{"name":"CurrentHalf","dataType":"string"},{"name":"BimesterNumber","dataType":"int64"},{"name":"BimesterYearName","dataType":"string"},{"name":"BimesterYearNumber","dataType":"int64"},{"name":"BimesterIndex","dataType":"int64"},{"name":"BimestersToToday","dataType":"int64"},{"name":"CurrentBimester","dataType":"string"},{"name":"FortnightOfMonthNumber","dataType":"int64"},{"name":"FortnightMonthNumber","dataType":"int64"},{"name":"FortnightMonthName","dataType":"string"},{"name":"FortnightMonthYearNumber","dataType":"int64"},{"name":"FortnightMonthYearName","dataType":"string"},{"name":"FortnightIndex","dataType":"int64"},{"name":"FortnightsToToday","dataType":"int64"},{"name":"CurrentFortnight","dataType":"string"},{"name":"ClosingDateRef","dataType":"date"},{"name":"ClosingYear","dataType":"int64"},{"name":"ClosingMonthName","dataType":"string"},{"name":"ClosingMonthNameShort","dataType":"string"},{"name":"ClosingMonthNumber","dataType":"int64"},{"name":"ClosingMonthYearName","dataType":"string"},{"name":"ClosingMonthYearNumber","dataType":"int64"},{"name":"SeasonNorthNumber","dataType":"int64"},{"name":"SeasonNorthName","dataType":"string"},{"name":"SeasonSouthNumber","dataType":"int64"},{"name":"SeasonSouthName","dataType":"string"},{"name":"Holiday","dataType":"string"},{"name":"BusinessDayNumber","dataType":"int64"},{"name":"BusinessDayName","dataType":"string"},{"name":"FiscalYearStartNumber","dataType":"int64"},{"name":"FiscalYearEndNumber","dataType":"int64"},{"name":"FiscalYear","dataType":"string"},{"name":"FiscalYearStart","dataType":"date"},{"name":"FiscalYearEnd","dataType":"date"},{"name":"CurrentFiscalYear","dataType":"string"},{"name":"FiscalYearsToToday","dataType":"int64"},{"name":"FiscalMonthNumber","dataType":"int64"},{"name":"FiscalMonthName","dataType":"string"},{"name":"FiscalMonthNameShort","dataType":"string"},{"name":"CurrentFiscalMonth","dataType":"string"},{"name":"FiscalYearMonthName","dataType":"string"},{"name":"FiscalYearMonthNumber","dataType":"int64"},{"name":"FiscalYearMonthCurrent","dataType":"string"},{"name":"FiscalMonthsToToday","dataType":"int64"},{"name":"FiscalQuarterNumber","dataType":"int64"},{"name":"FiscalQuarterName","dataType":"string"},{"name":"FiscalMonthOfQuarterNumber","dataType":"int64"},{"name":"FiscalYearQuarterName","dataType":"string"},{"name":"FiscalYearQuarterNumber","dataType":"int64"},{"name":"FiscalQuarterStart","dataType":"date"},{"name":"FiscalQuarterEnd","dataType":"date"},{"name":"FiscalQuartersToToday","dataType":"int64"},{"name":"CurrentFiscalQuarter","dataType":"string"},{"name":"DayOfFiscalQuarter","dataType":"int64"}]}]}